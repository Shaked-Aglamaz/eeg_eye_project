import numpy as np
import pygame
from numpy.random import random
from psychopy import core, data, gui, visual
from pylsl import StreamInfo, StreamOutlet


def init_lsl_outlet():
    info = StreamInfo('MyMarkerStream', 'Markers', 1, 0, 'string', 'myuidw43536')
    # next make an outlet
    outlet = StreamOutlet(info)
    return outlet


def lsl(outlet, str1):
    outlet.push_sample([str1])


# Make a text file to save data
expInfo = {"subject": "0"}
subjectN = expInfo["subject"]
dlg = gui.DlgFromDict(expInfo, title="Two-armed bandit task XBOX")
fileName = "XBox_rumblePress_" + expInfo["subject"] + "_" + data.getDateStr()
dataFile = open(fileName + ".csv", "w")  # a simple text file with 'comma-separated-values'
dataFile.write("subject, block, trial, offer_right, offer_left, exp_value_right, exp_value_left, key, key_ID, chosen_card, unchosen_card, rt, reward\n")

##Initializing game
pygame.init()
j = pygame.joystick.Joystick(0)
j.init()

# create a window
win = visual.Window([800, 600], fullscr = True, monitor="testMonitor", units="deg", color=(-1, -1, -1), useFBO=False)
mytimer = core.Clock()

n = 100 # Number of trials
stim_id = np.zeros(n)
won = visual.ImageStim(win, image="rw.png", pos=[0, 0], size=3)
lost = visual.ImageStim(win, image="ur.jpg", pos=[0, 0], size=4)
fixation = visual.TextStim(win, text="+", pos=[0, 0], color=(0, 0, 0))

# Random Walk for 100 Trials 
RW = np.zeros((2,150))
RW2 = np.zeros((2, 150))
RW[0] = [0.69358862, 0.69056294, 0.71319523, 0.68607327, 0.66128443,
        0.69511306, 0.72510969, 0.67753924, 0.66872967, 0.64560663,
        0.62928264, 0.63827553, 0.63700392, 0.62446919, 0.60904519,
        0.57690435, 0.59423321, 0.58575815, 0.59886733, 0.55970336,
        0.52668733, 0.48536218, 0.50111334, 0.49594437, 0.52664975,
        0.5428878 , 0.4979855 , 0.45972423, 0.49828841, 0.47420307,
        0.47101485, 0.47660617, 0.50878503, 0.52913878, 0.53191122,
        0.53126461, 0.52493828, 0.53170162, 0.51037051, 0.48966776,
        0.46539734, 0.43462077, 0.4459349 , 0.39552202, 0.39521325,
        0.39648387, 0.42574789, 0.41140559, 0.43921914, 0.43937153,
        0.43077782, 0.43196726, 0.43917048, 0.47579774, 0.46876027,
        0.47226086, 0.48123031, 0.44508451, 0.47180429, 0.47269556,
        0.51407401, 0.47425831, 0.45472194, 0.45733921, 0.49081758,
        0.54477401, 0.54001411, 0.56796924, 0.60501449, 0.54701455,
        0.53540954, 0.55461799, 0.54943097, 0.5439532 , 0.58474324,
        0.6217131 , 0.62231837, 0.6079382 , 0.63103477, 0.69749351,
        0.65994047, 0.66791988, 0.66829403, 0.67631837, 0.65071166,
        0.63520623, 0.60347061, 0.63733096, 0.6083781 , 0.5968193 ,
        0.57489693, 0.55128889, 0.52774345, 0.53530998, 0.56523975,
        0.50116191, 0.48423724, 0.46302955, 0.45662196, 0.49262346,
        0.50899516, 0.45958937, 0.45513015, 0.46810702, 0.44827011,
        0.48246799, 0.48915011, 0.49528431, 0.44837508, 0.43986946,
        0.42491271, 0.42984534, 0.46378481, 0.5074899 , 0.50561143,
        0.46419626, 0.47858755, 0.51810931, 0.50817948, 0.4480541 ,
        0.37817627, 0.35156619, 0.37291658, 0.41451678, 0.40509868,
        0.36773253, 0.33821943, 0.35436164, 0.33992904, 0.37438722,
        0.39477744, 0.41201372, 0.42981026, 0.44073558, 0.42365266,
        0.42761603, 0.39641444, 0.42088471, 0.43251587, 0.40652832,
        0.40825032, 0.42180157, 0.41158739, 0.42691052, 0.44985236,
        0.4540286 , 0.46975155, 0.48452901, 0.5173328 , 0.50287832]

RW[1] = [0.38187668, 0.3963755 , 0.42184579, 0.41592763, 0.40928682,
        0.42147605, 0.41316813, 0.4452702 , 0.43634603, 0.48269385,
        0.44708582, 0.41062622, 0.49079817, 0.50851058, 0.56138499,
        0.56250636, 0.5480705 , 0.55178611, 0.54322118, 0.57398473,
        0.53910594, 0.53945614, 0.55485135, 0.51798414, 0.5357713 ,
        0.5369896 , 0.5293018 , 0.50692946, 0.50359935, 0.54197855,
        0.57129608, 0.59351306, 0.59973273, 0.62561819, 0.62325941,
        0.61088179, 0.6122672 , 0.59882923, 0.59276663, 0.62016496,
        0.60799379, 0.60124495, 0.6375376 , 0.60278116, 0.62716774,
        0.59950089, 0.59770842, 0.60320901, 0.6253576 , 0.618828  ,
        0.58544921, 0.57616521, 0.62020837, 0.57958563, 0.5730182 ,
        0.55914168, 0.52969211, 0.52345804, 0.51747114, 0.48167139,
        0.5048448 , 0.48878139, 0.48387052, 0.49469685, 0.51077025,
        0.52474082, 0.48970627, 0.50062098, 0.52406385, 0.51586742,
        0.50483561, 0.49790795, 0.46044214, 0.44071895, 0.4499043 ,
        0.46174599, 0.45322719, 0.44354427, 0.43829184, 0.41849364,
        0.42271111, 0.42304732, 0.40524698, 0.40600375, 0.40026013,
        0.40650534, 0.38628293, 0.37420182, 0.35229553, 0.35898359,
        0.32523531, 0.3268759 , 0.35882333, 0.3949442 , 0.39153298,
        0.39950853, 0.39963173, 0.38045394, 0.36756741, 0.33371617,
        0.30421503, 0.2983208 , 0.31451267, 0.32640852, 0.35579624,
        0.38439728, 0.41898715, 0.40466293, 0.38711447, 0.39658558,
        0.39088967, 0.39098721, 0.36844855, 0.36849724, 0.40097652,
        0.47126982, 0.46924319, 0.47183754, 0.45033169, 0.44108252,
        0.42781925, 0.44066774, 0.44115338, 0.44582231, 0.45370637,
        0.43998497, 0.37416113, 0.38341087, 0.37414907, 0.37565487,
        0.43058151, 0.46307506, 0.4417629 , 0.46106976, 0.49073919,
        0.48949825, 0.48041219, 0.48465765, 0.51524366, 0.53081022,
        0.52591958, 0.55005508, 0.54491209, 0.60691832, 0.55641862,
        0.56070967, 0.54939482, 0.5698616 , 0.58515565, 0.58188126]

RW_100 = [RW[0][0:100], RW[1][0:100]]

RW2[0] = [0.46305219, 0.48374131, 0.48109038, 0.48595678, 0.44105523,
        0.47238288, 0.44258986, 0.42493424, 0.4474272 , 0.42871451,
        0.43424995, 0.48504965, 0.52018643, 0.50889843, 0.5448063 ,
        0.57628476, 0.6025449 , 0.58005258, 0.58378093, 0.60916158,
        0.61926738, 0.63284809, 0.63102963, 0.65558358, 0.64619623,
        0.71480863, 0.76324551, 0.78795086, 0.76193754, 0.78163942,
        0.8005641 , 0.80332755, 0.8326838 , 0.8223417 , 0.82675134,
        0.81271171, 0.80853616, 0.80167778, 0.81511396, 0.80969944,
        0.81832795, 0.80417386, 0.81519387, 0.8127183 , 0.79628823,
        0.82034617, 0.86477113, 0.87305847, 0.80633836, 0.78207457,
        0.77531399, 0.81555194, 0.77468495, 0.75880344, 0.71931318,
        0.69481328, 0.72416623, 0.75354993, 0.73776518, 0.74811914,
        0.76599462, 0.7521944 , 0.69226868, 0.6829126 , 0.68068568,
        0.69185075, 0.63911518, 0.63557022, 0.63101756, 0.62396971,
        0.59779534, 0.5825272 , 0.58276362, 0.52784535, 0.49844729,
        0.51430864, 0.51947422, 0.5288168 , 0.52803341, 0.4963737 ,
        0.52151878, 0.53666389, 0.53764816, 0.53449977, 0.55274374,
        0.53313712, 0.53522218, 0.48661615, 0.4882052 , 0.50575838,
        0.52749687, 0.51312849, 0.50063648, 0.48424463, 0.50270224,
        0.52554593, 0.49403692, 0.46828062, 0.4182621 , 0.38841081,
        0.42895409, 0.44109925, 0.42479366, 0.41202352, 0.40452972,
        0.39631178, 0.38855357, 0.40431794, 0.41888653, 0.4047038 ,
        0.40594135, 0.40938178, 0.41134313, 0.43764621, 0.41934559,
        0.3652156 , 0.434218  , 0.39164683, 0.39486581, 0.40424423,
        0.40702297, 0.38286889, 0.35871367, 0.39332251, 0.40586178,
        0.42618543, 0.44450083, 0.46535728, 0.46653839, 0.42436206,
        0.46940372, 0.47068603, 0.44009495, 0.46125991, 0.4895804 ,
        0.50742876, 0.52745788, 0.50555136, 0.56875861, 0.527085  ,
        0.51180586, 0.49802946, 0.50661383, 0.47887855, 0.50874665,
        0.53582167, 0.51446141, 0.51676812, 0.54479993, 0.52953078]
RW2[1] = [0.68119975, 0.65255638, 0.66803367, 0.65127254, 0.636496  ,
        0.61230165, 0.59239415, 0.61242258, 0.61898565, 0.60258094,
        0.60633946, 0.62032248, 0.63204966, 0.63305421, 0.64143564,
        0.66001396, 0.65165722, 0.63038138, 0.63416697, 0.63614138,
        0.62290614, 0.62142847, 0.60355547, 0.58032506, 0.57919545,
        0.56221147, 0.58335477, 0.58315473, 0.56515752, 0.59751333,
        0.57457043, 0.55572938, 0.53324226, 0.52959238, 0.55814356,
        0.58075435, 0.56060618, 0.58354218, 0.55591258, 0.60059129,
        0.58544022, 0.58312564, 0.61983656, 0.62690486, 0.6482968 ,
        0.63092514, 0.64144863, 0.61059696, 0.60760724, 0.58277913,
        0.5821519 , 0.55699655, 0.55293395, 0.56654164, 0.5616028 ,
        0.54748174, 0.51041979, 0.53848557, 0.54732916, 0.55642147,
        0.53549649, 0.56629308, 0.54302713, 0.51525702, 0.54492506,
        0.55402059, 0.55694957, 0.5672705 , 0.55917089, 0.56135539,
        0.538411  , 0.49818697, 0.5055189 , 0.49739355, 0.49979174,
        0.52053868, 0.51947557, 0.54979765, 0.56522012, 0.54299986,
        0.53729631, 0.55592381, 0.53561117, 0.51290632, 0.52225452,
        0.54874864, 0.53318353, 0.56152435, 0.53499203, 0.52771889,
        0.53186815, 0.5242489 , 0.51772329, 0.51291295, 0.48418647,
        0.45240931, 0.41220978, 0.42764987, 0.4346003 , 0.45987181,
        0.45728225, 0.4226155 , 0.38638897, 0.40063128, 0.41054569,
        0.39347412, 0.38529148, 0.43655479, 0.43723484, 0.45537384,
        0.43986118, 0.44670383, 0.44329051, 0.430533  , 0.43919704,
        0.45086953, 0.50876936, 0.58312657, 0.56768094, 0.60188631,
        0.55615859, 0.56946922, 0.55167395, 0.53412288, 0.53209542,
        0.53311705, 0.51464979, 0.55778117, 0.58158183, 0.57572191,
        0.60575602, 0.60598866, 0.6290205 , 0.63388   , 0.63359985,
        0.63970524, 0.63915206, 0.64053316, 0.64518868, 0.63346359,
        0.58236313, 0.59014528, 0.58949241, 0.59158063, 0.60447044,
        0.58516998, 0.55110578, 0.5482525 , 0.56554389, 0.57515884]

# Experiment Flow Function    
def main():
    b = 1 # num of blocks
    lsl_outlet = init_lsl_outlet()
    for i in range(b):
        startBlock = f"startblock{i + 1}.jpg"
        endBlock = f"endblock{i + 1}.jpg"
        start = visual.ImageStim(win, image=startBlock,  units='norm', size=[2,2], interpolate=True)
        end = visual.ImageStim(win, image=endBlock,  units='norm', size=[2,2], interpolate=True)
        start.draw()
        win.update()
        # Wait for response to begin block
        while True:
            events = pygame.event.poll()
            if (events.type == pygame.JOYBUTTONDOWN):
            #Event 0 -> Pressed A Button
                if events.button == 0:
                    mainExperimentModes(dataFile, subjectN, win, lsl_outlet, i)
                    break
        end.draw()
        win.update()
        # Wait for response to end block
        while True:
            events = pygame.event.poll()
            if (events.type == pygame.JOYBUTTONDOWN):
            #Event 0 -> Pressed A Button
                if events.button == 0:
                    break

def mainExperimentModes(dataFile, subjectN, win, lsl_outlet, i):
    picList = ['1.png', '2.png']
    current_RW = RW_100
    # Initilizing Game
    pygame.init()
    j = pygame.joystick.Joystick(0)
    j.init()

    for t in range(1, n + 1):
        mytimer = core.Clock()
        # Draw the stimuli and update the window
        x = np.random.randint(0, 2)
        btnL = visual.ImageStim(win, image=picList[x], pos=[-15, 0], size=(5,8))
        btnR = visual.ImageStim(win, image=picList[1 - x], pos=[15, 0], size=(5,8))
        fixation.draw()
        lsl(lsl_outlet, 'fixation')
        win.update()
        core.wait(1)
        fixation.draw()
        btnL.draw()
        btnR.draw()
        lsl(lsl_outlet, 'stim')
        win.update()
        mytimer.reset(0)
        while True:
            events = pygame.event.poll()
            if (events.type == pygame.JOYBUTTONDOWN):
                lsl(lsl_outlet, 'choice')
                #Event 4 -> Pressing down left button, Event 5 -> Pressing down right button
                if events.button == 4:
                    RT = str(mytimer.getTime())
                    btnL.draw()
                    stim_id = int(picList[x].split(".")[0])
                    other_id = int(picList[1 - x].split(".")[0])
                    prob1 = current_RW[other_id - 1 - 2 * i][t - 1]
                    prob2 = current_RW[stim_id - 1 - 2 * i][t - 1]
                    win.update()
                    key = 4
                    stimapr = "pressed left button"
                    dataFile.write("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, " 
                        % (
                            subjectN,
                            i,
                            t,
                            picList[1 - x],
                            picList[x],
                            prob1,
                            prob2,
                            stimapr,
                            key,
                            str(stim_id),
                            str(other_id),
                            RT,
                        )
                    )
                elif events.button == 5:
                    RT = str(mytimer.getTime())
                    btnR.draw()
                    stim_id = int(picList[1 - x].split(".")[0])
                    other_id = int(picList[x].split(".")[0])
                    prob1 = current_RW[stim_id - 1 - 2 * i][t-1]
                    prob2 = current_RW[other_id - 1 - 2 * i][t-1]
                    win.update()
                    key = 5
                    stimapr = "pressed right button"
                    dataFile.write("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, " 
                        % (
                            subjectN,
                            i,
                            t,
                            picList[1 - x],
                            picList[x],
                            prob1,
                            prob2,
                            stimapr,
                            key,
                            str(stim_id),
                            str(other_id),
                            RT,
                        )
                    )       
                break       
        
        core.wait(0.5)     
    
        # outcome using Random Walk for n trials
        curr_prob = current_RW[stim_id - 1 - 2 * i][t - 1]
        if (random() < curr_prob):
            won.draw()
            dataFile.write("%i\n" % (1,))
        else:
            lost.draw()
            dataFile.write("%i,\n" % (0,))
        lsl(lsl_outlet, 'outcome')
        win.update()
        core.wait(1)

main()
